
/**
 * Bitboard representation:
 *    a  b  c  d  e  f  g  h
 *   +-----------------------+
 * 8 |56 57 58 59 60 61 62 63| 8
 * 7 |48 49 50 51 52 53 54 55| 7
 * 6 |40 41 42 43 44 45 46 47| 6
 * 5 |32 33 34 35 36 37 38 39| 5
 * 4 |24 25 26 27 28 29 30 31| 4
 * 3 |16 17 18 19 20 21 22 23| 3
 * 2 |8  9  10 11 12 13 14 15| 2
 * 1 |0  1  2  3  4  5  6  7 | 1
 *   +-----------------------+
 *    a  b  c  d  e  f  g  h
 */

==============================================================================

Ideally we want to be able to manipulate the position in this way:
  position.makeMove(m);
  position.unmakeMove(m);
Calling both make and unmake with the same move object.

Every move requires these three things in order to make that move:
  from square
  to square
  move type

Additional information is required in order to unmake the move. For example, if
a capture is made, we need to remember what piece was captured in order to
unmake that move.

Unmaking moves requires this information from prior to the move:
  clock
  en passant file
  castling rights
  captured piece type

Note that for en passant, it is sufficient to keep track of only the file on
which en passant capture is possible. When making or unmaking the move, the
rank of the captured pawn can be derived from whose turn it is.

==============================================================================
-How to do a forward bitscan-

A forward bitscan is when we want to calculate the index of the least
significant 1 bit in a bitboard (ie, the index of the first 1). Obviously you
can loop through every bit, starting with the lowest bit, and just checking
until you find that 1. But this is really slow, and one of the reasons to use
bitboards in the first place is to circumvent this kind of looping by taking
advantage of binary tricks and math. That is what we will do.

My approach was taken from here:
https://www.chessprogramming.org/BitScan#De_Bruijn_Multiplication

Before continuing, make sure you do NOT attempt to do this on an empty
bitboard. If it doesn't have a 1, then you can't find the LS1B!

Here is how it works. We have the following magical 64 bit constant:

D = 0x03f79d71b4cb0a89

This is called a De Bruijn sequence. It is special because any 6-bit substring
you take of the constant is unique (including substrings you can make by
wrapping around). In fact, there are exactly 64 different 6-bit substrings that
exist, and each of them is represented somewhere in the above constant.
Furthermore, this particular De Bruijn sequence has its 000000 as the leftmost
substring.

Now suppose we have some nonzero 64-bit integer b for which we want to find 
the index of its first 1. First we can use the following binary trick to get a
64-bit string which has ONLY that lowest 1 and is 0 everywhere else:

b & -b

This works because of the way that two's complement works. Just think about how
you take a two's complement by hand and you will quickly understand how the 
LS1B is the only 1 that both b and -b have in common.

Now what we do is multiply D by this (b & -b):

(b & -b) * D

Notice that (b & -b) is arithmetically a power of 2, let's call it
(b & -b) = 2^e. In fact, this e is what we are trying to calculate in the first
place. Anyway, this means that (b & -b) * D is actually the same thing as left
shift by e.

Because of our choice of D, the highest 6 bits of D after it has been left
shifted are still going to be a unique 6-bit string. This is because D is a De
Bruijn sequence to begin with as well as the aforementioned fact that it's
000000 substring was on the far left to begin with; any 0 padding that makes
its way to the highest 6 bits after the shift are effectively pretending to be
those old leading 0's wrapping around. Now all that is left to do is to extract
this 6-bit string as an unsigned integer by right shift:

((b & -b) * D) >> 58

Note: Make sure b and D are unsigned types so that >> pads with 0 in all cases.

In this way, we have a created a one-to-one correspondence between the 64
different possible locations of the LS1B and the 6-bit unsigned integers from 0
to 63. Now we can simply look up the value of e by referencing a pre-calculated
table based off of our original D:

const int index64[64] = {
    0,  1, 48,  2, 57, 49, 28,  3,
   61, 58, 50, 42, 38, 29, 17,  4,
   62, 55, 59, 36, 53, 51, 43, 22,
   45, 39, 33, 30, 24, 18, 12,  5,
   63, 47, 56, 27, 60, 41, 37, 16,
   54, 35, 52, 21, 44, 32, 23, 11,
   46, 26, 40, 15, 34, 20, 31, 10,
   25, 14, 19,  9, 13,  8,  7,  6
};


==============================================================================
-How to calculate sliding piece attacks-

Sliding pieces are bishops, rooks, and queens. In a given chess position, we
want to be able to make a bitboard representing all the potential moves one of
those pieces can make. Like with bitscan, we don't want to just do this by
simple loops if we can avoid it. Well, we still have to use SOME kind of loop,
but this is faster than the naive approach.

We will use the so-called "Blockers and Beyond" strategy from this page:
https://www.chessprogramming.org/Blockers_and_Beyond

We must first precalculate three different arrays of bitboards.

1. Attack sets on the otherwise empty board. Given a piece type and square,
these bitboards show all the different moves that could be made on an empty
board. We need to calculate 64 of these for each piece type, but realize that
the queen bitboards will just be the union of the rook and bishops. By the
way, it is also worth it to calculate for non-sliding pieces as well, but those
are not important right now.

2. The "blockers and beyond" bitboards. Again, one needed for each piece type
and each square on the board. For sliding pieces, these bitboards are very
similar to the attack-on-empty bitboards, but the difference is that the
furthest-out bits in each direction are set to 0. See the example below. You
would never use these for non-sliding pieces.

3. The "behind" masks. The total number of these is difficult to count, but it
is something less than 64^2. Given a start square and an end square on the same
line (horizontal, vertical, or diagonal), this mask will have all 1's on each
bit behind the end square on the bitboard.

Examples: Suppose there is a queen on d4.

pieceAttacks[q][d4]   blockers&beyond[q][d4]
 . . . 1 . . . 1       . . . . . . . .
 1 . . 1 . . 1 .       . . . 1 . . 1 .
 . 1 . 1 . 1 . .       . 1 . 1 . 1 . .
 . . 1 1 1 . . .       . . 1 1 1 . . .
 1 1 1 . 1 1 1 1       . 1 1 . 1 1 1 .
 . . 1 1 1 . . .       . . 1 1 1 . . .
 . 1 . 1 . 1 . .       . 1 . 1 . 1 . .
 1 . . 1 . . 1 .       . . . . . . . .

And here is the behind mask for the starting square d4 and ending square f6
(which would be useful if, for example, there was a blocking piece on f6):

 . . . . . . . 1
 . . . . . . 1 .
 . . . . . . . .
 . . . . . . . .
 . . . . . . . .
 . . . . . . . .
 . . . . . . . .
 . . . . . . . .

Now here is algorithm for calculating attack squares. Given a chess position,
you are interested in the attack squares of one particular sliding piece. Start
by fetching the attack-on-empty board corresponding to that piece and square.
The actual available attacks are going to be some subset of this board, and we
need to determine which squares to eliminate.

Now we will determine the locations of the blockers. In this case, a blocker
could be any piece, friendly or otherwise. So first union all the different
piece bitboards together, then intersect that with the "blockers and beyond"
board. This gives us a bitboard with all the blockers identified. We will call
this b.

This is where looping becomes necessary, as we must iterate through each
blocker. Each time we handle one, we will remove it from b. Thus our loop will
continue until b == 0.

For each iteration, calculate the blocker's square by doing a bitscan. That
blocker is, well, blocking all the squares which are behind it. We can grab
those squares by using our "behind" mask with the moving piece as the start and
the blocker's square as the end. To eliminate these squares from b, we take the
complement of the mask and intersect it with a.

Note that we are only eliminating the squares which are BEHIND the blocker.
This is because if the blocker is an enemy piece, we still want to be able to
capture that blocker. What if the blocker is friendly? We will deal with that
later.

So now that we are done with handling that blocker, we want to remove it from
b. This can be done by the following:

b &= (b - 1)

Why does this work? Because we use bitscan to get the blocker with each
iteration, our blocker is located at the LS1B. When we subtract 1, the LS1B is
going to become 0, which will eliminate that 1 when we take the intersection.
Meanwhile, all the higher bits are going to be identical between b and b - 1,
and all of the lower bits in b are already 0 to begin with. Thus b &= (b - 1)
will turn the LS1B into a 0 and preserve the rest.

Once we have iterated through all the blockers, our attack board is all done,
except for one thing. We want to eliminate attacks against friendly blockers,
but this is simple enough: Just union up all the friendly pieces, take the
complement of that, and intersect it with the attack board.
